" ============================================================================" Vim settings and mappings" You can edit them as you wish" allow plugins by file type (required for plugins!)filetype plugin onfiletype indent on" tabs and spaces handlingset expandtabset tabstop=4set softtabstop=4set shiftwidth=4" tab length exceptions on some file typesautocmd FileType html setlocal shiftwidth=2 tabstop=2 softtabstop=2autocmd FileType htmldjango setlocal shiftwidth=2 tabstop=2 softtabstop=2autocmd FileType javascript setlocal shiftwidth=2 tabstop=2 softtabstop=2" always show status barset ls=2" incremental searchset incsearch" highlighted search resultsset hlsearch" syntax highlight onsyntax on" show line numbersset nu" tab navigation mappingsmap tn :tabn<CR>map tp :tabp<CR>map tm :tabmmap tt :tabnewmap ts :tab split<CR>map <C-S-Right> :tabn<CR>imap <C-S-Right> <ESC>:tabn<CR>map <C-S-Left> :tabp<CR>imap <C-S-Left> <ESC>:tabp<CR>" navigate windows with meta+arrowsmap <M-Right> <c-w>lmap <M-Left> <c-w>hmap <M-Up> <c-w>kmap <M-Down> <c-w>jimap <M-Right> <ESC><c-w>limap <M-Left> <ESC><c-w>himap <M-Up> <ESC><c-w>kimap <M-Down> <ESC><c-w>j" old autocomplete keyboard shortcutimap <C-J> <C-X><C-O>" Comment this line to enable autocompletion preview window" (displays documentation related to the selected completion option)" Disabled by default because preview makes the window flickerset completeopt-=preview" save as sudoca w!! w !sudo tee "%"" simple recursive grep" both recursive grep commands with internal or external (fast) grepcommand! -nargs=1 RecurGrep lvimgrep /<args>/gj ./**/*.* | lopen | set nowrapcommand! -nargs=1 RecurGrepFast silent exec 'lgrep! <q-args> ./**/*.*' | lopen" mappings to call themnmap ,R :RecurGrepnmap ,r :RecurGrepFast" mappings to call them with the default word as search textnmap ,wR :RecurGrep <cword><CR>nmap ,wr :RecurGrepFast <cword><CR>" use 256 colors when possibleif &term =~? 'mlterm\|xterm\|xterm-256\|screen-256'	let &t_Co = 256    colorscheme fisaelse    colorscheme delekendif" colors for gvimif has('gui_running')    colorscheme wombatendif" when scrolling, keep cursor 3 lines away from screen borderset scrolloff=3" autocompletion of files and commands behaves like shell" (complete only the common part, list the options that match)set wildmode=list:longest" better backup, swap and undos storageset directory=~/.vim/dirs/tmp     " directory to place swap files inset backup                        " make backup filesset backupdir=~/.vim/dirs/backups " where to put backup filesset undofile                      " persistent undos - undo after you re-open the fileset undodir=~/.vim/dirs/undosset viminfo+=n~/.vim/dirs/viminfo" store yankring history file there toolet g:yankring_history_dir = '~/.vim/dirs/'" create needed directories if they don't existif !isdirectory(&backupdir)    call mkdir(&backupdir, "p")endifif !isdirectory(&directory)    call mkdir(&directory, "p")endifif !isdirectory(&undodir)    call mkdir(&undodir, "p")endif" ============================================================================" Plugins settings and mappings" Edit them as you wish." Tagbar -----------------------------" toggle tagbar displaymap <F4> :TagbarToggle<CR>" autofocus on tagbar openlet g:tagbar_autofocus = 1" NERDTree -----------------------------" toggle nerdtree displaymap <F3> :NERDTreeToggle<CR>" open nerdtree with the current file selectednmap ,t :NERDTreeFind<CR>" don;t show these file typeslet NERDTreeIgnore = ['\.pyc$', '\.pyo$']" Tasklist ------------------------------" show pending tasks listmap <F2> :TaskList<CR>" Vim-debug ------------------------------" disable default mappings, have a lot of conflicts with other pluginslet g:vim_debug_disable_mappings = 1" add some useful mappingsmap <F5> :Dbg over<CR>map <F6> :Dbg into<CR>map <F7> :Dbg out<CR>map <F8> :Dbg here<CR>map <F9> :Dbg break<CR>map <F10> :Dbg watch<CR>map <F11> :Dbg down<CR>map <F12> :Dbg up<CR>" CtrlP ------------------------------" file finder mappinglet g:ctrlp_map = ',e'" tags (symbols) in current file finder mappingnmap ,g :CtrlPBufTag<CR>" tags (symbols) in all files finder mappingnmap ,G :CtrlPBufTagAll<CR>" general code finder in all files mappingnmap ,f :CtrlPLine<CR>" recent files finder mappingnmap ,m :CtrlPMRUFiles<CR>" commands finder mappingnmap ,c :CtrlPCmdPalette<CR>" to be able to call CtrlP with default search textfunction! CtrlPWithSearchText(search_text, ctrlp_command_end)    execute ':CtrlP' . a:ctrlp_command_end    call feedkeys(a:search_text)endfunction" same as previous mappings, but calling with current word as default textnmap ,wg :call CtrlPWithSearchText(expand('<cword>'), 'BufTag')<CR>nmap ,wG :call CtrlPWithSearchText(expand('<cword>'), 'BufTagAll')<CR>nmap ,wf :call CtrlPWithSearchText(expand('<cword>'), 'Line')<CR>nmap ,we :call CtrlPWithSearchText(expand('<cword>'), '')<CR>nmap ,pe :call CtrlPWithSearchText(expand('<cfile>'), '')<CR>nmap ,wm :call CtrlPWithSearchText(expand('<cword>'), 'MRUFiles')<CR>nmap ,wc :call CtrlPWithSearchText(expand('<cword>'), 'CmdPalette')<CR>" don't change working directorylet g:ctrlp_working_path_mode = 0" ignore these files and folders on file finderlet g:ctrlp_custom_ignore = {  \ 'dir':  '\v[\/](\.git|\.hg|\.svn)$',  \ 'file': '\.pyc$\|\.pyo$',  \ }" Syntastic ------------------------------" show list of errors and warnings on the current filenmap <leader>e :Errors<CR>" check also when just opened the filelet g:syntastic_check_on_open = 1" don't put icons on the sign column (it hides the vcs status icons of signify)let g:syntastic_enable_signs = 0" custom icons (enable them if you use a patched font, and enable the previous" setting)"let g:syntastic_error_symbol = '✗'"let g:syntastic_warning_symbol = '⚠'"let g:syntastic_style_error_symbol = '✗'"let g:syntastic_style_warning_symbol = '⚠'" Python-mode ------------------------------" don't use linter, we use syntastic for thatlet g:pymode_lint_on_write = 0let g:pymode_lint_signs = 0" don't fold python code on openlet g:pymode_folding = 0" don't load rope by default. Change to 1 to use ropelet g:pymode_rope = 0" open definitions on same window, and custom mappings for definitions and" occurrenceslet g:pymode_rope_goto_definition_bind = ',d'let g:pymode_rope_goto_definition_cmd = 'e'nmap ,D :tab split<CR>:PymodePython rope.goto()<CR>nmap ,o :RopeFindOccurrences<CR>" NeoComplCache ------------------------------" most of them not documented because I'm not sure how they work" (docs aren't good, had to do a lot of trial and error to make" it play nice)let g:neocomplcache_enable_at_startup = 1let g:neocomplcache_enable_ignore_case = 1let g:neocomplcache_enable_smart_case = 1let g:neocomplcache_enable_auto_select = 1let g:neocomplcache_enable_fuzzy_completion = 1let g:neocomplcache_enable_camel_case_completion = 1let g:neocomplcache_enable_underbar_completion = 1let g:neocomplcache_fuzzy_completion_start_length = 1let g:neocomplcache_auto_completion_start_length = 1let g:neocomplcache_manual_completion_start_length = 1let g:neocomplcache_min_keyword_length = 1let g:neocomplcache_min_syntax_length = 1" complete with workds from any opened filelet g:neocomplcache_same_filetype_lists = {}let g:neocomplcache_same_filetype_lists._ = '_'" TabMan ------------------------------" mappings to toggle display, and to focus on itlet g:tabman_toggle = 'tl'let g:tabman_focus  = 'tf'" Autoclose ------------------------------" Fix to let ESC work as espected with Autoclose pluginlet g:AutoClosePumvisible = {"ENTER": "\<C-Y>", "ESC": "\<ESC>"}" DragVisuals ------------------------------" mappings to move blocks in 4 directionsvmap <expr> <S-M-LEFT> DVB_Drag('left')vmap <expr> <S-M-RIGHT> DVB_Drag('right')vmap <expr> <S-M-DOWN> DVB_Drag('down')vmap <expr> <S-M-UP> DVB_Drag('up')" mapping to duplicate blockvmap <expr> D DVB_Duplicate()" Signify ------------------------------" this first setting decides in which order try to guess your current vcs" UPDATE it to reflect your preferences, it will speed up opening fileslet g:signify_vcs_list = [ 'git', 'hg' ]" mappings to jump to changed blocksnmap <leader>sn <plug>(signify-next-hunk)nmap <leader>sp <plug>(signify-prev-hunk)" nicer colorshighlight DiffAdd           cterm=bold ctermbg=none ctermfg=119highlight DiffDelete        cterm=bold ctermbg=none ctermfg=167highlight DiffChange        cterm=bold ctermbg=none ctermfg=227highlight SignifySignAdd    cterm=bold ctermbg=237  ctermfg=119highlight SignifySignDelete cterm=bold ctermbg=237  ctermfg=167highlight SignifySignChange cterm=bold ctermbg=237  ctermfg=227" Window Chooser ------------------------------" mappingnmap  -  <Plug>(choosewin)" show big letterslet g:choosewin_overlay_enable = 1" Airline ------------------------------let g:airline_powerline_fonts = 0"let g:airline_theme = 'bubblegum'let g:airline#extensions#whitespace#enabled = 0" to use fancy symbols for airline, uncomment the following lines and use a" patched font (more info on the README.rst)"if !exists('g:airline_symbols')"   let g:airline_symbols = {}"endif"let g:airline_left_sep = '⮀'"let g:airline_left_alt_sep = '⮁'"let g:airline_right_sep = '⮂'"let g:airline_right_alt_sep = '⮃'"let g:airline_symbols.branch = '⭠'"let g:airline_symbols.readonly = '⭤'"let g:airline_symbols.linenr = '⭡'" MiniBufExplorer" Bundle 'minibufexpl.vim'let g:miniBufExplMapWindowNavVim = 1let g:miniBufExplMapWindowNavArrows = 1let g:miniBufExplMapCTabSwitchBufs = 1let g:miniBufExplModSelTarget = 1let g:miniBufExplMoreThanOne=0map <F11> :MBEbp<CR>map <F12> :MBEbn<CR>" implement of cmd+s:map <M-s> :w<kEnter>  "Works in normal mode, must press Esc first":imap <M-s> <Esc>:w<kEnter>i "Works in insert mode, saves and puts back in insert mode",v
jc_configs,v
endtry,V
catch,V
try,V
" CtrlP ------------------------------" file finder mappinglet g:ctrlp_map = ',e'" tags (symbols) in current file finder mappingnmap ,g :CtrlPBufTag<CR>" tags (symbols) in all files finder mappingnmap ,G :CtrlPBufTagAll<CR>" general code finder in all files mappingnmap ,f :CtrlPLine<CR>" recent files finder mappingnmap ,m :CtrlPMRUFiles<CR>" commands finder mappingnmap ,c :CtrlPCmdPalette<CR>" to be able to call CtrlP with default search textfunction! CtrlPWithSearchText(search_text, ctrlp_command_end)    execute ':CtrlP' . a:ctrlp_command_end    call feedkeys(a:search_text)endfunction" same as previous mappings, but calling with current word as default textnmap ,wg :call CtrlPWithSearchText(expand('<cword>'), 'BufTag')<CR>nmap ,wG :call CtrlPWithSearchText(expand('<cword>'), 'BufTagAll')<CR>nmap ,wf :call CtrlPWithSearchText(expand('<cword>'), 'Line')<CR>nmap ,we :call CtrlPWithSearchText(expand('<cword>'), '')<CR>nmap ,pe :call CtrlPWithSearchText(expand('<cfile>'), '')<CR>nmap ,wm :call CtrlPWithSearchText(expand('<cword>'), 'MRUFiles')<CR>nmap ,wc :call CtrlPWithSearchText(expand('<cword>'), 'CmdPalette')<CR>" don't change working directorylet g:ctrlp_working_path_mode = 0" ignore these files and folders on file finderlet g:ctrlp_custom_ignore = {  \ 'dir':  '\v[\/](\.git|\.hg|\.svn)$',  \ 'file': '\.pyc$\|\.pyo$',  \ },v
TagbarGetTypeConfig,V
3,v
,V
[hydra-mon]cld-mon[1:3]-13.i.nease.net ansible_become_pass=fai[hydra-rgw]cld-radosgw[1:2]-13.i.nease.net ansible_become_pass=fai[hydra-osd]cld-osd[1:3]-13.i.nease.net ansible_become_pass=fai[hydra:children]hydra-monhydra-rgwhydra-osd,v
[hydra-mon]cld-mon[1:3]-13.i.nease.net ansible_become_pass=fai,V
# Text File# AUTHOR:   JetChars# FILE:     roles/rgw/files/confs/ceph.client.radosgw.ophiuchus.keyring# ROLE:     TODO (some explanation)# CREATED:  2016-12-02 17:30:58# MODIFIED: 2016-12-02 17:30:58,v
cat /etc/ceph/ceph.client.radosgw.keyring,V
ceph -s,V
man ceph,V
history | tail,V
308  [2016-12-02 17:21:39]  ce  309  [2016-12-02 17:21:50]    310  [2016-12-02 17:22:29]    311  [2016-12-02 17:24:03]    312  [2016-12-02 17:24:20]    313  [2016-12-02 17:26:48]    314  [2016-12-02 17:26:56]    315  [2016-12-02 17:27:06]    316  [2016-12-02 17:27:57]  ,30
`,v
ring ,v
mon,v
#    - mon,V
mon1,v
osd,v
#- hosts: ophiuchus-osd,V
#- hosts: ophiuchus#- hosts: cld-mon1-31.i.nease.net#  become: yes#  roles:#    - mon,V
#- hosts: ophiuchus,V
    - common,V
  tags: test,V
- include: "{{ role_path }}/tasks/s3_cgroup.yml"  when: ceph_role_name == "radosgw",V
- lineinfile: >    dest=/etc/init.d/nginx backup=yes    regexp="start\-stop\-daemon \-\-start"    line="    cgexec -g memory:nginx start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- \ ",V
- lineinfile: >    dest=/etc/init.d/nginx backup=yes    regexp="start\-stop\-daemon \-\-start",V
1,v
rgw_id ,v
ceph_role_name: "{{ inventory_hostname | regex_replace('^cld-(.*)\\d+-.*$', '\\1') }}",V
\,v
 ,v
=,v
    line=,V
#,v
-,v
"cgexec -g memory:nginx start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- ",v
    line="cgexec -g memory:nginx start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON -- ",V
-stop-daemon --start,v
\\\\,v
",v
 backup=yes,v
- ini_file: >    dest=/etc/ceph/ceph.conf    section="client.radosgw.hxs1"  tags: test,V
scripts ,v
Vim ,v
vim,v
  elseif l:ft ==# 'vim'      let s:comment = "\""      let s:type = s:comment . " Vim File",V
# Text File# AUTHOR:   JetChars# FILE:     roles/rgw/files/confs/nginx/access.lua# ROLE:     TODO (some explanation)# CREATED:  2016-12-02 14:49:51# MODIFIED: 2016-12-02 14:49:51,V
serpens-osd,V
 ,V
10.110.81.[11:19] ansible_become_pass=fai10.110.81.[40:48] ansible_become_pass=fai[serpens-rgw]220.181.36.14 ansible_become_pass=fai220.181.36.12 ansible_become_pass=fai,V
[serpens-mon]cld-mon[1:3]-15.i.nease.net ansible_become_pass=fai,V
18,v
[serpens-osd]cld-osd[1:18]-15.i.nease.net ansible_become_pass=fai,V
ansible_become_pass=fai,v
[hydra-rgw]223.252.209.[9:10] ansible_become_pass=fai[hydra-mon]10.63.200.[19:21] ansible_become_pass=fai[hydra-osd]10.160.209.110 ansible_become_pass=fai10.160.209.[5:6] ansible_become_pass=fai,v
- debug: msg={{ ceph_role_name }}  tags: test,V
ceph,v
/,v
files,v
copy,v
e,v
ansibl,v
cld-osd1-14,v
s,v
x,v
demo,v
cn-zone,v
  #对应的endpoint信息,v
radosgw,v
rgw_id,v
rgw_id: "{{ inventory_hostname | regex_replace('^cld-radosgw(.*)-.*$', '\\1') }}",V
],v
grub ,v
default,v
- lineinfile: >    dest=/etc/default/grub backup=yes,V
    - rgw_id == "1",V
- apt: name=cgroup-bin state=present- command: grep cgroup /etc/default/grub  register: is_grub_changed  ignore_errors: True- debug: msg={{ rgw_id }}- lineinfile: >    dest=/etc/default/grub backup=yes    regexp=^GRUB_CMDLINE_LINUX=    line=GRUB_CMDLINE_LINUX="clocksource=tsc consoleblank=0 ipv6.disable=1 cgroup_enable=memory"  when:    - rgw_id == "1"    - is_grub_changed | failed- raw: update-grub2 && update-grub  when: is_grub_changed | succeeded,v
ansible_become_pass=fai,v
48,v
[ophiuchus-mon]cld-mon[1:3]-31.i.nease.net ansible_become_pass=fai[ophiuchus-rgw]cld-radosgw[1:3]-31.i.nease.net ansible_become_pass=fai[ophiuchus-osd]cld-osd[1:48]-31.i.nease.net ansible_become_pass=fai[ophiuchus:children]ophiuchus-monophiuchus-rgwophiuchus-osd,v
[hydra-rgw]223.252.209.[9:10] ansible_become_pass=fai[hydra-mon]10.63.200.[19:21] ansible_become_pass=fai[hydra-osd]10.160.209.110 ansible_become_pass=fai10.160.209.[5:6] ansible_become_pass=fai,v
[serpens-osd]10.110.81.[11:19] ansible_become_pass=fai10.110.81.[40:48] ansible_become_pass=fai[serpens-rgw]220.181.36.14 ansible_become_pass=fai220.181.36.12 ansible_become_pass=fai[serpens:children]serpens-rgwserpens-osd,v
#######,1
- debug: msg={{ is_grub_changed | failed }},V
dd,V
| regex_replace('1', 'a') | regex_replace('2', 'b') | regex_replace('3', 'c') ,v
o,v
- hosts: cld-mon1-31.i.nease.net  become: yes  roles:    - mon,V
GRUB_DEFAULT=hello,v
GRUB_DEFAULT= ,v
b,v
GRUB_DEFAULT,v
ini ,v
.,v
testn,v
